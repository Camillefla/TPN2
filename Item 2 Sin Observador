% CODIGO PARA IMPLEMENTAR CONTROL LQR CON ACCIÓN INTEGRAL
% ALUMNO: FLAJOLET Camille 
% TP 2 item 2
% Profesor Pucheta
clear all, close all, clc

%% 1. PARÁMETROS DEL MOTOR
Ra = 2.27;        % Resistencia del inducido [Ω]
Laa = 0.0047;     % Inductancia del inducido [H]
Ki = 0.25;        % Constante de torque [Nm/A]
J = 0.00233;      % Momento de inercia [kg·m²]
B = 0.00131;      % Coeficiente de fricción viscosa [Nm·s/rad]
Km = 0.25;        % Constante fuerza contraelectromotriz [V/rad/s]

%% 2. MODELADO DEL SISTEMA
% Variables de estado:
% x1 = ia (corriente)
% x2 = wr (velocidad angular)
% x3 = theta (posición angular)
Mat_A = [-Ra/Laa -Km/Laa 0;
         Ki/J -B/J 0;
         0 1 0];
Mat_B = [1/Laa; 0; 0];
Mat_C = [0 0 1];  % Solo medimos la posición angular
Mat_D = 0;

%% 3. EXTENSIÓN PARA CONTROL INTEGRAL
Mat_Aa = [Mat_A zeros(3,1); 
         -Mat_C 0];       % Aumentamos con estado integral
Mat_Ba = [Mat_B; 0];      % Matriz B ampliada
Mat_Cc = [Mat_C 0];       % Matriz C ampliada

%% 4. DISEÑO DEL CONTROLADOR LQR
% Matrices de ponderación ajustadas experimentalmente
Q = diag([1 1/100 1000 10000]);  % Pesos para: [ia, wr, theta, integral]
R = 800.0;                      % Peso para acción de control

% Construcción del Hamiltoniano
Ha = [Mat_Aa -Mat_Ba*inv(R)*Mat_Ba';
      -Q -Mat_Aa'];
[n,va] = size(Ha);

% Cálculo de autovectores estables
[V,D] = eig(Ha);
MX1X2 = [];
for ii = 1:n
    if real(D(ii,ii)) < 0
        MX1X2 = [MX1X2 V(:,ii)]; % Selección de modos estables
    end
end

% Solución de la ecuación de Riccati
MX1 = MX1X2(1:n/2,:);
MX2 = MX1X2(n/2+1:end,:);
P = real(MX2/MX1);        % Matriz de Lyapunov

% Cálculo de ganancias
Ka = inv(R)*Mat_Ba'*P;
K = Ka(1:3);             % Ganancia para estados físicos
KI = -Ka(4);             % Ganancia integral

% Verificación de polos en lazo cerrado
disp('Polos del sistema en lazo cerrado:');
disp(eig(Mat_Aa - Mat_Ba*Ka));

%% 5. CONFIGURACIÓN DE SIMULACIÓN
% Parámetros temporales
delta_t = 1e-3;         % Paso de integración
tiempo = 10;            % Duración total [s]
pasos = round(tiempo/delta_t);
t = 0:delta_t:(tiempo-delta_t);

% Referencia angular (señal cuadrada)
ref = zeros(1,pasos);
Tref = pi/2;           % Amplitud de referencia
tc = 5;                % Periodo de conmutación
ii = 0;
for i = 1:pasos-1
    ii = ii + delta_t;
    if ii >= tc
        ii = 0;
        Tref = -Tref;  % Inversión de referencia
    end
    ref(i) = Tref;
end

% Torque de perturbación periódico
TL = linspace(0, 0, pasos);
Tl = 0.12;
jj = 0;
for n = 1:pasos-1
    jj = jj + delta_t;
    if jj >= 0.701
        TL(n) = Tl;
    else
        TL(n) = 0;
    end
end

%% 6. INICIALIZACIÓN DE VARIABLES
x = zeros(4,pasos);    % Estados: [ia; wr; theta; integral]
ua = zeros(1,pasos);   % Señal de control
J_ = zeros(1,pasos);   % Costo acumulado
V_ = zeros(1,pasos);   % Función de Lyapunov

%% 7. BUCLE PRINCIPAL DE SIMULACIÓN
for i = 2:pasos
    % Estado actual
    estado = x(:,i-1);
    
    % Cálculo de función de Lyapunov
    V_(i) = estado'*P*estado;
    
    % Término integral del error
    integracion = x(4,i-1) + delta_t*(ref(i-1) - Mat_Cc*estado);
    
    % Ley de control LQI
    u_actual = -Ka*estado + integracion*KI;
    
    % Actualización de costo acumulado
    J_(i) = J_(i-1) + (estado'*Q*estado + u_actual'*R*u_actual)*delta_t;
    ua(i) = u_actual;
    
    % Ecuaciones dinámicas del motor
    ia_p = (-Ra/Laa)*estado(1) - (Km/Laa)*estado(2) + (1/Laa)*u_actual;
    w_p = (Ki/J)*estado(1) - (B/J)*estado(2) - (1/J)*TL(i-1);
    theta_p = estado(2);
    
    % Integración Euler
    x(1:3,i) = estado(1:3) + delta_t*[ia_p; w_p; theta_p];
    x(4,i) = integracion;
end

%% 8. VISUALIZACIÓN DE RESULTADOS
figure(1)
subplot(2,2,1)
plot(t, x(3,:), t, ref)
title('Posición angular vs Referencia')
xlabel('Tiempo [s]'), ylabel('Theta [rad]')
grid on, legend('Theta', 'Referencia')

subplot(2,2,2)
plot(t, x(2,:))
title('Velocidad Angular')
xlabel('Tiempo [s]'), ylabel('ω [rad/s]')
grid on

subplot(2,2,3)
plot(t, x(1,:))
title('Corriente del Motor')
xlabel('Tiempo [s]'), ylabel('Ia [A]')
grid on

subplot(2,2,4)
plot(t, ua)
title('Señal de Control')
xlabel('Tiempo [s]'), ylabel('U [V]')
grid on

figure(2)
subplot(2,1,1)
semilogy(t, J_)
title('Evolución del Costo Acumulado')
xlabel('Tiempo [s]'), ylabel('J(x,u)')
grid on

subplot(2,1,2)
semilogy(t, V_)
title('Función de Lyapunov')
xlabel('Tiempo [s]'), ylabel('V(x)')
grid on

figure(3)
plot(t, TL)
title('Torque de Perturbación')
xlabel('Tiempo [s]'), ylabel('TL [Nm]')
grid on

