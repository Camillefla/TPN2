% CODIGO PARA IMPLEMENTAR EL CONTROLADOR LQR CON ACCIÓN INTEGRAL
% ALUMNO: FLAJOLET Camille 
% TP 2 item 2
% Profesor Pucheta
clear all, close all, clc

%% 1. Parámetros físicos del motor DC
Ra = 2.27;          % Resistencia del inducido [Ω]
Laa = 0.0047;       % Inductancia del inducido [H]
Ki = 0.25;          % Constante de torque [Nm/A]
J = 0.00233;        % Momento de inercia [kg·m²]
B = 0.00131;        % Coeficiente de fricción viscosa [Nm·s/rad]
Km = 0.25;          % Constante fuerza contraelectromotriz [V/(rad/s)]

%% 2. Matrices del modelo en espacio de estados
% Variables de estado: 
% x1 = ia (corriente), x2 = wr (velocidad angular), x3 = theta (posición angular)
Mat_A = [-Ra/Laa -Km/Laa 0;
         Ki/J -B/J 0;
         0 1 0];
Mat_B = [1/Laa; 0; 0];
Mat_C = [0 0 1];    % Salida: posición angular
Mat_D = 0;

%% 3. Matrices ampliadas para incluir acción integral
Mat_Aa = [Mat_A zeros(3,1);
         -Mat_C 0];   % Estado aumentado con integral del error
Mat_Ba = [Mat_B; 0];
Mat_Cc = [Mat_C 0];

%% 4. Diseño del controlador LQR
Q = diag([1 1/100 1000 10000]); % Penalización en estados y error integral
R = 800.0;                     % Penalización en la señal de control

% Construcción del Hamiltoniano para Riccati
Ha = [Mat_Aa -Mat_Ba*inv(R)*Mat_Ba';
      -Q -Mat_Aa'];
[n, ~] = size(Ha);

% Cálculo de eigenvalores y eigenvectores
[V,D] = eig(Ha);
MX1X2 = [];

% Selección de eigenvectores asociados a polos estables (parte real negativa)
for ii = 1:n
    if real(D(ii,ii)) < 0
        MX1X2 = [MX1X2 V(:,ii)];
    end
end

% Separación para cálculo de matriz P
MX1 = MX1X2(1:n/2, :);
MX2 = MX1X2(n/2+1:end, :);

% Cálculo de matriz P solución de Riccati
P = real(MX2 / MX1);

% Cálculo de ganancias del controlador
Ka = inv(R) * Mat_Ba' * P;
K = Ka(1:3);   % Ganancias sobre estados
KI = -Ka(4);   % Ganancia integral

% Verificación de estabilidad (polos en lazo cerrado)
disp('Polos del sistema en lazo cerrado:');
disp(eig(Mat_Aa - Mat_Ba * Ka));

%% 5. Inicialización para simulación
J_(1) = 0; V_(1) = 0; psi(1) = 0;
delta_t = 1e-3;           % Paso de integración
tiempo = 10;              % Tiempo total de simulación [s]
pasos = round(tiempo / delta_t);
Ci = [0 0 0 0];           % Condiciones iniciales
t = 0:delta_t:(tiempo - delta_t);

% Generación de señal de referencia alternante
ref = zeros(1, pasos);
Tref = pi/2;
tc = 5;
ii = 0;
for i = 1:pasos-1
    ii = ii + delta_t;
    if ii >= tc
        ii = 0;
        Tref = -Tref;
    end
    ref(i) = Tref;
end

% Torque perturbador aplicado periódicamente
TL = zeros(1, pasos);
Tl = 0.12;
jj = 0;
for n = 1:pasos-1
    jj = jj + delta_t;
    if jj >= 0.701
        TL(n) = Tl;
    else
        TL(n) = 0;
    end
end

%% 6. Simulación del sistema
x = zeros(4, pasos);
x(:,1) = Ci';

ua(1) = 0;

for i = 2:pasos
    estado = x(:, i-1);
    
    % Función de Lyapunov para monitorear estabilidad
    V_(i) = estado' * P * estado;
    
    % Actualización del término integral del error
    integracion = x(4, i-1) + delta_t * (ref(i-1) - Mat_Cc * estado);
    
    % Ley de control LQI
    u_actual = -Ka * estado + integracion * KI;
    
    % Funcional de costo acumulado
    J_(i) = J_(i-1) + (estado' * Q * estado + u_actual' * R * u_actual) * delta_t;
    
    ua(i) = u_actual;
    
    % Ecuaciones dinámicas del motor
    ia_p = (-Ra / Laa) * estado(1) - (Km / Laa) * estado(2) + (1 / Laa) * u_actual;
    w_p = (Ki / J) * estado(1) - (B / J) * estado(2) - (1 / J) * TL(i-1);
    theta_p = estado(2);
    
    % Integración Euler
    x(1:3, i) = estado(1:3) + delta_t * [ia_p; w_p; theta_p];
    x(4, i) = integracion;
end

%% 7. Visualización de resultados
figure(1)
subplot(2, 2, 1)
plot(t, x(3, :), t, ref)
title('Ángulo Theta y referencia')
xlabel('Tiempo [s]')
ylabel('Theta [rad]')
grid on
legend('Theta', 'Referencia')

subplot(2, 2, 2)
plot(t, x(2, :))
title('Velocidad angular')
xlabel('Tiempo [s]')
ylabel('ω [rad/s]')
grid on

subplot(2, 2, 3)
plot(t, x(1, :))
title('Corriente Ia')
xlabel('Tiempo [s]')
ylabel('Corriente [A]')
grid on

subplot(2, 2, 4)
plot(t, ua)
title('Acción de control')
xlabel('Tiempo [s]')
ylabel('Voltaje [V]')
grid on

figure(2)
subplot(2, 1, 1)
semilogy(t, J_)
title('Funcional de costo J(x,u)')
xlabel('Tiempo [s]')
grid on

subplot(2, 1, 2)
semilogy(t, V_)
title('Función de Lyapunov V(x,u)')
xlabel('Tiempo [s]')
grid on

figure(3)
plot(t, TL)
title('Torque perturbador')
xlabel('Tiempo [s]')
grid on
