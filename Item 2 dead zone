% CODIGO PARA IMPLEMENTAR EL CONTROLADOR LQR CON ACCIÓN INTEGRAL
% ALUMNO: FLAJOLET Camille 
% TP 2 item 1
% Profesor Pucheta
clear all, close all, clc

%% 1. Parámetros del motor DC
Ra = 2.27;          % Resistencia del inducido [Ω]
Laa = 0.0047;       % Inductancia del inducido [H]
Ki = 0.25;          % Constante de torque [Nm/A]
J = 0.00233;        % Momento de inercia [kg·m²]
B = 0.00131;        % Coeficiente de fricción viscosa [Nm·s/rad]
Km = 0.25;          % Constante fuerza contraelectromotriz [V/(rad/s)]

%% 2. Matrices del sistema en espacio de estados
% Variables de estado:
% x1 = ia (corriente)
% x2 = wr (velocidad angular)
% x3 = theta (posición angular)
Mat_A = [-Ra/Laa -Km/Laa 0;
         Ki/J -B/J 0;
         0 1 0];
Mat_B = [1/Laa; 0; 0];
Mat_C = [0 0 1];    % Salida: posición angular
Mat_D = 0;

%% 3. Matrices ampliadas para control integral
Mat_Aa = [Mat_A zeros(3,1);
         -Mat_C 0];    % Se añade estado integral para eliminar error en régimen permanente
Mat_Ba = [Mat_B; 0];
Mat_Cc = [Mat_C 0];

%% 4. Diseño del controlador LQR
Q = diag([1 1/100 500 8000]); % Penalización sobre estados y error integral
R = 500.0;                   % Penalización sobre la acción de control

% Construcción del Hamiltoniano para resolver la ecuación de Riccati
Ha = [Mat_Aa -Mat_Ba*inv(R)*Mat_Ba';
      -Q -Mat_Aa'];
[n, ~] = size(Ha);

% Cálculo de autovectores y autovalores
[V,D] = eig(Ha);
Mx1x2 = [];

% Selección de autovectores con parte real negativa (estables)
for ii = 1:n
    if real(D(ii,ii)) < 0
        Mx1x2 = [Mx1x2 V(:,ii)];
    end
end

% Separación de bloques para cálculo de matriz P
Mx1 = Mx1x2(1:n/2,:);
Mx2 = Mx1x2(n/2+1:end,:);

% Cálculo de matriz P solución de Riccati
P = real(Mx2 / Mx1);

% Cálculo de ganancias del controlador
Ka = inv(R)*Mat_Ba'*P;
K = Ka(1:3);     % Ganancias sobre estados
KI = Ka(4);      % Ganancia integral

% Verificación de estabilidad (polos en lazo cerrado)
disp('Polos del sistema en lazo cerrado:');
disp(eig(Mat_Aa - Mat_Ba*Ka));

%% 5. Diseño del observador
Mat_A_d = Mat_A';
Mat_B_d = Mat_C';
Mat_C_d = Mat_B';

% Matrices de ponderación para el observador
Qo = diag([1 1/100 800000]);
Ro = 300.0;

% Hamiltoniano para el observador
Ho = [Mat_A_d -Mat_B_d*inv(Ro)*Mat_B_d';
      -Qo -Mat_A_d'];
[no, ~] = size(Ho);

% Cálculo de autovectores y autovalores para observador
[V,D] = eig(Ho);
Mx1x2 = [];
for ii = 1:no
    if real(D(ii,ii)) < 0
        Mx1x2 = [Mx1x2 V(:,ii)];
    end
end

Mx1 = Mx1x2(1:no/2,:);
Mx2 = Mx1x2(no/2+1:end,:);

% Matriz Po solución de Riccati para observador
Po = real(Mx2 / Mx1);

% Ganancia del observador
Ko = (inv(Ro)*Mat_B_d'*Po)';

% Verificación de polos del observador
disp('Polos del observador:');
disp(eig(Mat_A - Ko*Mat_C));

%% 6. Inicialización para simulación
J_(1) = 0; V_(1) = 0; psi(1) = 0;
x_hat = [0; 0; 0];       % Estado estimado inicial

delta_t = 1e-4;          % Paso de integración
tiempo = 10;             % Duración total
pasos = round(tiempo/delta_t);
Ci = [0 0 0 0];
t = 0:delta_t:(tiempo - delta_t);

% Generación de señal de referencia alternante
ref = zeros(1,pasos);
Tref = pi/2;
tc = 5;
ii = 0;
for i = 1:pasos-1
    ii = ii + delta_t;
    if ii >= tc
        ii = 0;
        Tref = -Tref;
    end
    ref(i) = Tref;
end

% Torque perturbador
TL = zeros(1,pasos);
Tl = 0.12;
jj = 0;
for n = 1:pasos-1
    jj = jj + delta_t;
    if jj >= 0.701
        TL(n) = Tl;
    else
        TL(n) = 0;
    end
end

% Función zona muerta
function y = deadzone(u, d)
    y = zeros(size(u));
    y(u > d)  = u(u > d)  - d;
    y(u < -d) = u(u < -d) + d;
    % y es cero si -d <= u <= d
end

deadzone_list = [0, 0.2, 0.5, 0.8, 1.2]; % Valores de zona muerta a probar
couleurs = ['g' 'r' 'b' 'y' 'k' 'm'];    % Colores para graficar

%% 7. Simulación para diferentes zonas muertas
for k = 1:length(deadzone_list)
    x = zeros(4, pasos);
    x(1,1) = Ci(1);
    x(2,1) = Ci(2);
    x(3,1) = Ci(3);
    x(4,1) = Ci(4);
    x_hat = [0; 0; 0];
    ua = zeros(1, pasos);
    ua(1) = 0;

    J_(1) = 0; V_(1) = 0; psi(1) = 0;

    for i = 2:pasos
        estado = [x(1,i-1); x(2,i-1); x(3,i-1); x(4,i-1)];
        V_(i) = estado' * P * estado;
        integracion = x(4,i-1) + delta_t * (ref(i-1) - Mat_Cc * estado);

        % Ley de control con observador
        u_actual = -K * x_hat - integracion * KI;

        % Aplicación de zona muerta
        u_applique = deadzone(u_actual, deadzone_list(k));
        J_(i) = J_(i-1) + (estado' * Q * estado + u_applique' * R * u_applique) * delta_t;
        ua(i) = u_applique;

        % Ecuaciones del motor
        ia_p = (-Ra / Laa) * estado(1) - (Km / Laa) * estado(2) + (1 / Laa) * u_applique;
        w_p = (Ki / J) * estado(1) - (B / J) * estado(2) - (1 / J) * TL(i-1);
        theta_p = estado(2);

        xp_actual = [ia_p; w_p; theta_p];

        xsig = estado(1:3) + delta_t * xp_actual;
        x(1,i) = xsig(1);
        x(2,i) = xsig(2);
        x(3,i) = xsig(3);
        x(4,i) = integracion;

        % Actualización del observador
        y_sal_O(i) = Mat_C * x_hat;
        y_sal(i) = Mat_Cc * estado;
        x_hatp = Mat_A * x_hat + Mat_B * u_applique + Ko * (y_sal(i) - y_sal_O(i));
        x_hat = x_hat + delta_t * x_hatp;
    end

    % Gráficos
    figure(1)
    subplot(2, 2, 1);
    plot(t, x(3, :), 'Color', couleurs(k), 'DisplayName', ['deadzone = ' num2str(deadzone_list(k)) ' V']);
    legend('show'); hold on; grid on;

    subplot(2, 2, 2);
    plot(t, x(2, :), 'Color', couleurs(k)); title('Velocidad angular, w'); hold on;

    subplot(2, 2, 3);
    plot(t, x(1, :), 'Color', couleurs(k)); title('Corriente Ia'); hold on;

    subplot(2, 2, 4);
    plot(t, ua, 'Color', couleurs(k)); title('Accion de control'); hold on;

    figure(2)
    subplot(2, 1, 1);
    semilogy(t, J_, 'Color', couleurs(k), 'DisplayName', ['deadzone = ' num2str(deadzone_list(k)) ' V']);
    legend('Show'); title('Funcional de costo J(x,u)'); hold on;

    subplot(2, 1, 2);
    semilogy(t, V_, 'Color', couleurs(k)); title('Funcion de Liapunov V(x,u)'); hold on;
end

% Agregar referencia en el gráfico de ángulo
figure(1)
subplot(2, 2, 1);
plot(t, ref, 'color', 'c', 'DisplayName', 'ref');
legend('show'); hold on;
