% CODIGO PARA IMPLEMENTAR EL CONTROLADOR CON OBSERVADOR Y ZONA MUERTA
% ALUMNO: FLAJOLET Camille 
% TP 2 item 1
% Profesor Pucheta
clear all, close all, clc

%-------------------------
%% 1. PARÁMETROS DEL MOTOR
Ra = 2.2781228953606902;       % Resistencia del rotor [Ω]
Laa = 0.005187184919244553;    % Inductancia del rotor [H]
Ki = 0.2618711775870197;       % Constante de torque [Nm/A]
J = 0.002848787974411428;      % Momento de inercia [kg·m²]
B = 0.0014279727330389095;     % Fricción viscosa [Nm·s/rad]
Km = 0.2499435593696499;       % Constante fuerza contraelectromotriz [V/rad/s]

%-------------------------
%% 2. MODELO DE ESTADO DEL MOTOR
% Variables de estado:
% x1 = ia (corriente)
% x2 = wr (velocidad angular)
% x3 = theta (posición angular)
Mat_A = [-Ra/Laa -Km/Laa 0;
          Ki/J -B/J 0;
          0 1 0];
Mat_B = [1/Laa; 0; 0];
Mat_C = [0 0 1];   % Solo medimos el ángulo theta
Mat_D = 0;

%-------------------------
%% 3. SISTEMA AMPLIADO PARA CONTROL INTEGRAL
Mat_Aa = [Mat_A zeros(3,1); 
         -Mat_C 0];       % Aumentamos con estado integral
Mat_Ba = [Mat_B; 0];      % Matriz B ampliada
Mat_Cc = [Mat_C 0];       % Matriz C ampliada

%-------------------------
%% 4. DISEÑO DEL CONTROLADOR LQR
Q = diag([1 1/100 10 1000000]);  % Pesos para: [ia, wr, theta, integral]
R = 500.0;                      % Peso para la acción de control

% Hamiltoniano para ecuación de Riccati
Ha = [Mat_Aa -Mat_Ba*inv(R)*Mat_Ba';
      -Q -Mat_Aa'];
[n,va] = size(Ha);

% Descomposición espectral para polos estables
[V,D] = eig(Ha);
Mx1x2 = [];
for ii = 1:n
    if real(D(ii,ii)) < 0
        Mx1x2 = [Mx1x2 V(:,ii)]; % Eigenvectores estables
    end
end

% Solución de Riccati
Mx1 = Mx1x2(1:n/2,:);
Mx2 = Mx1x2(n/2+1:end,:);
P = real(Mx2/Mx1);        % Matriz de Riccati

% Cálculo de ganancias
Ka = inv(R)*Mat_Ba'*P;
K = Ka(1:3);              % Ganancia para estados
KI = Ka(4);               % Ganancia integral

% Verificación de polos en lazo cerrado
disp('Polos del sistema en lazo cerrado:');
disp(eig(Mat_Aa - Mat_Ba*Ka));

%-------------------------
%% 5. DISEÑO DEL OBSERVADOR
% Sistema dual para diseño del observador
Mat_A_d = Mat_A';
Mat_B_d = Mat_C';
Mat_C_d = Mat_B';

% Matrices de ponderación del observador
Qo = diag([1 1/10000 200000]);  % Pesos para error de estimación
Ro = 500;                       % Peso para ruido de medición

% Hamiltoniano para observador
Ho = [Mat_A_d -Mat_B_d*inv(Ro)*Mat_B_d';
      -Qo -Mat_A_d'];
[no,va] = size(Ho);

% Solución de Riccati para observador
[V,D] = eig(Ho);
Mx1x2 = [];
for ii = 1:no
    if real(D(ii,ii)) < 0
        Mx1x2 = [Mx1x2 V(:,ii)];
    end
end

Mx1 = Mx1x2(1:no/2,:);
Mx2 = Mx1x2(no/2+1:end,:);
Po = real(Mx2/Mx1);

% Ganancia del observador
Ko = (inv(Ro)*Mat_B_d'*Po)';
disp('Polos del observador:');
disp(eig(Mat_A - Ko*Mat_C));

%-------------------------
%% 6. CONFIGURACIÓN DE SIMULACIÓN
deadzone_list = [0, 0.2, 0.5, 0.8, 1.2]; % Valores de zona muerta a probar
couleurs = lines(length(deadzone_list));  % Paleta de colores RGB

% Parámetros temporales
delta_t = 1e-4;        % Paso de integración
tiempo = 10;           % Tiempo total de simulación
pasos = round(tiempo/delta_t);
t = 0:delta_t:(tiempo-delta_t);

% Referencia angular (señal cuadrada)
ref = zeros(1,pasos);
Tref = pi/2;
tc = 5;                % Periodo de conmutación
ii = 0;
for i = 1:pasos-1
    ii = ii + delta_t;
    if ii >= tc
        ii = 0;
        Tref = -Tref;  % Inversión de referencia
    end
    ref(i) = Tref;
end

% Torque de perturbación (pulsos)
TL = zeros(1,pasos);
Tl = 0.12;             % Magnitud del torque
for n = 1:pasos-1
    if mod(n*delta_t, 0.701) < delta_t
        TL(n) = Tl;    % Aplicación periódica
    end
end

% Función de zona muerta
function y = deadzone(u, d)
    y = u;
    y(u > d) = u(u > d) - d;
    y(u < -d) = u(u < -d) + d;
    y(abs(u) <= d) = 0;
end

%-------------------------
%% 7. BUCLE PRINCIPAL DE SIMULACIÓN (para cada valor de zona muerta)
for k = 1:length(deadzone_list)
    % Inicialización de variables
    x = zeros(4,pasos);      % Estados reales
    x_hat = [0;0;0];         % Estados estimados
    ua = zeros(1,pasos);     % Acciones de control
    J_ = zeros(1,pasos);     % Costo acumulado
    V_ = zeros(1,pasos);     % Función de Lyapunov

    % Condiciones iniciales
    x(:,1) = [0;0;0;0];     % [ia; wr; theta; integral]
    
    % Bucle temporal
    for i = 2:pasos
        %-----------------------------------------
        % Ley de control con observador
        estado = x(:,i-1);
        error_integral = x(4,i-1) + delta_t*(ref(i-1) - Mat_Cc*estado);
        
        % Cálculo de la acción de control
        u_actual = -K*x_hat - KI*error_integral;
        
        % Aplicación de zona muerta
        ua(i) = deadzone(u_actual, deadzone_list(k));
        
        %-----------------------------------------
        % Ecuaciones dinámicas del motor (integración Euler)
        ia_p = (-Ra/Laa)*estado(1) - (Km/Laa)*estado(2) + (1/Laa)*ua(i);
        w_p = (Ki/J)*estado(1) - (B/J)*estado(2) - (1/J)*TL(i-1);
        theta_p = estado(2);
        
        x(1:3,i) = estado(1:3) + delta_t*[ia_p; w_p; theta_p];
        x(4,i) = error_integral;  % Actualización integral
        
        %-----------------------------------------
        % Actualización del observador
        y_est = Mat_C*x_hat;               % Salida estimada
        y_real = Mat_Cc*estado;            % Salida real
        x_hat = x_hat + delta_t*(...
                 Mat_A*x_hat + Mat_B*ua(i) + Ko*(y_real - y_est));
        
        %-----------------------------------------
        % Cálculo de métricas
        V_(i) = estado'*P*estado;          % Función de Lyapunov
        J_(i) = J_(i-1) + (estado'*Q*estado + ua(i)'*R*ua(i))*delta_t;
    end

    %-------------------------
    %% 8. VISUALIZACIÓN DE RESULTADOS
    figure(1)
    % Subplot 1: Ángulo vs Referencia
    subplot(2,2,1);
    plot(t, x(3,:), 'Color', couleurs(k,:), ...
        'DisplayName', ['Zona muerta: ' num2str(deadzone_list(k)) 'V']);
    hold on; grid on; title('Posición angular'); 
    xlabel('Tiempo [s]'); ylabel('Theta [rad]');
    
    % Subplot 2: Velocidad angular
    subplot(2,2,2);
    plot(t, x(2,:), 'Color', couleurs(k,:)); 
    title('Velocidad angular'); xlabel('Tiempo [s]'); ylabel('ω [rad/s]');
    hold on; grid on;
    
    % Subplot 3: Corriente
    subplot(2,2,3);
    plot(t, x(1,:), 'Color', couleurs(k,:)); 
    title('Corriente del motor'); xlabel('Tiempo [s]'); ylabel('Ia [A]');
    hold on; grid on;
    
    % Subplot 4: Acción de control
    subplot(2,2,4);
    plot(t, ua, 'Color', couleurs(k,:)); 
    title('Señal de control'); xlabel('Tiempo [s]'); ylabel('U [V]');
    hold on; grid on;
    
    figure(2)
    % Subplot 1: Costo acumulado
    subplot(2,1,1);
    semilogy(t, J_, 'Color', couleurs(k,:), ...
        'DisplayName', ['Zona muerta: ' num2str(deadzone_list(k)) 'V']);
    hold on; grid on; title('Costo acumulado J(x,u)');
    
    % Subplot 2: Función de Lyapunov
    subplot(2,1,2);
    semilogy(t, V_, 'Color', couleurs(k,:)); 
    title('Función de Lyapunov V(x)'); xlabel('Tiempo [s]');
    hold on; grid on;
end

% Añadir referencia en la primera figura
figure(1)
subplot(2,2,1);
plot(t, ref, 'k--', 'DisplayName', 'Referencia'); 
legend('Location', 'bestoutside');
