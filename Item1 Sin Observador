% CODIGO PARA IMPLEMENTAR EL CONTROLADOR
% ALUMNO: FLAJOLET Camille 
% TP 2 item 2
% Profesor Pucheta
clear all, close all, clc

%-------------------------
% Definición de parámetros físicos del motor
Ra = 2.2781228953606902;       % Resistencia del rotor (Ohm)
Laa = 0.005187184919244553;    % Inductancia del rotor (H)
Ki = 0.2618711775870197;       % Constante de torque (Nm/A)
J = 0.002848787974411428;      % Momento de inercia (kg*m^2)
B = 0.0014279727330389095;     % Coeficiente de fricción viscosa
Km = 0.2499435593696499;       % Constante de fuerza contraelectromotriz (V/rad/s)

%-------------------------
% Construcción de matrices de estado A, B, C, D a partir del modelo
% Variables de estado:
% x1 = ia    : corriente del rotor
% x2 = wr    : velocidad angular
% x3 = theta : posición angular del motor
Mat_A = [-Ra/Laa -Km/Laa 0; Ki/J -B/J 0; 0 1 0];
Mat_B = [1/Laa; 0; 0];
Mat_C = [0 0 1];   % Salida: ángulo theta
Mat_D = [0];

%-------------------------
% Matrices ampliadas para incluir el estado integral (para control integral)
Mat_Aa = [Mat_A zeros(3,1); -Mat_C 0]; % Matriz A extendida (4x4)
Mat_Ba = [Mat_B; 0];                   % Matriz B extendida (4x1)
Mat_Cc = [Mat_C 0];                   % Matriz C extendida (1x4)

%-------------------------
% Definición de matrices de ponderación para el controlador LQR
% Se ajustaron valores para obtener buen desempeño
Q = diag([1 1/100 1000 10000]); % Penaliza estados (corriente, velocidad, ángulo, integral)
R = 800.0;                     % Penalización sobre la señal de control

%-------------------------
% Construcción de la matriz Hamiltoniana para cálculo del controlador LQR
Ha = [Mat_Aa -Mat_Ba*inv(R)*Mat_Ba'; -Q -Mat_Aa'];
[n, va] = size(Ha); % Dimensiones para recorrer matriz

% Cálculo de eigenvalores y eigenvectores del Hamiltoniano
[V, D] = eig(Ha);

% Selección de eigenvectores asociados a polos estables (parte real negativa)
MX1X2 = [];
for ii = 1:n
    if real(D(ii,ii)) < 0
        MX1X2 = [MX1X2 V(:,ii)];
    end
end

% Separación de submatrices para cálculo de P
MX1 = MX1X2(1:n/2, :);
MX2 = MX1X2(n/2+1:end, :);

% Cálculo de la matriz P solución de Riccati (real para evitar residuos numéricos)
P = real(MX2 * inv(MX1));

% Cálculo de la ganancia ampliada Ka y separación en K y Ki (integral)
Ka = inv(R) * Mat_Ba' * P;
K = Ka(1:3);   % Ganancias sobre estados
KI = -Ka(4);   % Ganancia integral

% Verificación de estabilidad: polos del sistema en lazo cerrado
disp('Controlador ampliado en');
disp(eig(Mat_Aa - Mat_Ba * Ka));

%-------------------------
% Inicialización de variables para simulación
J_(1) = 0; % Funcional de costo inicial
V_(1) = 0; % Función de Lyapunov inicial
psi(1) = 0;

delta_t = 1e-3; % Paso de integración (Euler)
tiempo = 10;    % Tiempo total de simulación (s)
pasos = round(tiempo / delta_t);
Ci = [0 0 0 0]; % Condiciones iniciales para estados e integral
t = 0:delta_t:(tiempo - delta_t);

%-------------------------
% Generación de referencia escalonada alternante para el ángulo
ref = linspace(0, 0, pasos);
Tref = pi/2;
tc = 5;
ii = 0;
for i = 1:pasos-1
    ii = ii + delta_t;
    if ii >= tc
        ii = 0;
        Tref = -Tref; % Cambio de signo cada tc segundos
    end
    ref(i) = Tref;
end

%-------------------------
% Definición del torque externo aplicado (perturbación)
TL = linspace(0, 0, pasos);
Tl = 0.12;
jj = 0;
for n = 1:pasos-1
    jj = jj + delta_t;
    if jj >= 0.701
        TL(n) = Tl;
    else
        TL(n) = 0;
    end
end

%-------------------------
% Inicialización de vectores de estado y control
x = zeros(4, pasos);
x(:,1) = Ci'; % Estados iniciales: [ia; wr; theta; integral]
ua(1) = 0;    % Control inicial

%-------------------------
% Bucle de simulación con integración Euler
for i = 2:pasos
    % Estado actual
    estado = x(:, i-1);
    
    % Cálculo de función de Lyapunov para monitorear estabilidad
    V_(i) = estado' * P * estado;
    
    % Actualización del término integral (error acumulado)
    integracion = x(4, i-1) + delta_t * (ref(i-1) - Mat_Cc * estado);
    
    % Cálculo de la señal de control con ganancia integral
    u_actual = -Ka * estado + integracion * KI;
    
    % Cálculo del funcional de costo acumulado
    J_(i) = J_(i-1) + (estado' * Q * estado + u_actual' * R * u_actual) * delta_t;
    
    % Almacenamiento de la acción de control
    ua = [ua u_actual];
    
    % Ecuaciones dinámicas del motor (modelo continuo)
    ia_p = (-Ra / Laa) * estado(1) - (Km / Laa) * estado(2) + (1 / Laa) * u_actual;
    w_p = (Ki / J) * estado(1) - (B / J) * estado(2) - (1 / J) * TL(i-1);
    theta_p = estado(2);
    
    % Vector derivadas de estado
    xp_actual = [ia_p; w_p; theta_p];
    
    % Integración Euler para estados
    xsig = estado(1:3) + delta_t * xp_actual;
    x(1,i) = xsig(1);
    x(2,i) = xsig(2);
    x(3,i) = xsig(3);
    x(4,i) = integracion; % Estado integral actualizado
end

%-------------------------
% Graficación de resultados

figure(1)
subplot(2, 2, 1);
plot(t, x(3, :)); title('Ángulo Theta y referencia'); hold on; grid on;
plot(t, ref); legend('Ángulo Theta', 'Referencia');

subplot(2, 2, 2);
plot(t, x(2, :)); title('Velocidad angular, w'); hold on;

subplot(2, 2, 3);
plot(t, x(1, :)); title('Corriente Ia'); hold on;

subplot(2, 2, 4);
plot(t, ua); title('Acción de control'); hold on;

figure(2)
subplot(2, 1, 1);
semilogy(t, J_); title('Funcional de costo J(x,u)');

subplot(2, 1, 2);
semilogy(t, V_); title('Función de Lyapunov V(x,u)');

figure
plot(t, TL); title('Torque aplicado'); hold on;
